# File: cooling_unit.template
# Date: 2017-06-23
# Author: Wayne Lewis
#
# Description:
# Database for getting MTCA crate cooling unit sensors
#
# Macros:
# P:    PV prefix
# UNIT: Cooling unit number 
#
# This record is scanned and triggers the device support to read the values.
# Device support then processes all the I/O Intr records.
#
# Modifications:
# 2017-12-08	WL	Add fan averages

record(ai, "$(P)$(S)Volt12V-Mon") {
    field(DESC, "12 V supply (0)")
    field(DTYP, "Python Device")
    field(SCAN, "I/O Intr")
    field(INP,  "@MTCACrate get_val cu $(UNIT) 12V0")
    field(PREC, "2")

    info(archive,"monitor:5.0")
}

record(ai, "$(P)$(S)Volt12V1-Mon") {
    field(DESC, "12 V supply (1)")
    field(DTYP, "Python Device")
    field(SCAN, "I/O Intr")
    field(INP,  "@MTCACrate get_val cu $(UNIT) 12V0_1")
    field(PREC, "2")

    info(archive,"monitor:5.0")
}

record(ai, "$(P)$(S)Volt3V3-Mon") {
    field(DESC, "3.3 V supply")
    field(DTYP, "Python Device")
    field(SCAN, "I/O Intr")
    field(INP,  "@MTCACrate get_val cu $(UNIT) 3V3")
    field(PREC, "2")

    info(archive,"monitor:5.0")
}

record(ai, "$(P)$(S)Temp1-Mon") {
    field(DESC, "Temperature 1")
    field(DTYP, "Python Device")
    field(SCAN, "I/O Intr")
    field(INP,  "@MTCACrate get_val cu $(UNIT) TEMP1")
    field(PREC, "1")

    info(archive,"monitor:5.0")
}

record(ai, "$(P)$(S)Temp2-Mon") {
    field(DESC, "Temperature 2")
    field(DTYP, "Python Device")
    field(SCAN, "I/O Intr")
    field(INP,  "@MTCACrate get_val cu $(UNIT) TEMP2")
    field(PREC, "1")

    info(archive,"monitor:5.0")
}

record(ai, "$(P)$(S)Fan1-Mon") {
    field(DESC, "Fan 1")
    field(DTYP, "Python Device")
    field(SCAN, "I/O Intr")
    field(INP,  "@MTCACrate get_val cu $(UNIT) FAN1")
    field(PREC, "0")

    info(archive,"monitor:5.0")
}

record(ai, "$(P)$(S)Fan2-Mon") {
    field(DESC, "Fan 2")
    field(DTYP, "Python Device")
    field(SCAN, "I/O Intr")
    field(INP,  "@MTCACrate get_val cu $(UNIT) FAN2")
    field(PREC, "0")

    info(archive,"monitor:5.0")
}

record(ai, "$(P)$(S)Fan3-Mon") {
    field(DESC, "Fan 3")
    field(DTYP, "Python Device")
    field(SCAN, "I/O Intr")
    field(INP,  "@MTCACrate get_val cu $(UNIT) FAN3")
    field(PREC, "0")

    info(archive,"monitor:5.0")
}

record(ai, "$(P)$(S)Fan4-Mon") {
    field(DESC, "Fan 4")
    field(DTYP, "Python Device")
    field(SCAN, "I/O Intr")
    field(INP,  "@MTCACrate get_val cu $(UNIT) FAN4")
    field(PREC, "0")

    info(archive,"monitor:5.0")
}

record(ai, "$(P)$(S)Fan5-Mon") {
    field(DESC, "Fan 5")
    field(DTYP, "Python Device")
    field(SCAN, "I/O Intr")
    field(INP,  "@MTCACrate get_val cu $(UNIT) FAN5")
    field(PREC, "0")

    info(archive,"monitor:5.0")
}

record(ai, "$(P)$(S)Fan6-Mon") {
    field(DESC, "Fan 6")
    field(DTYP, "Python Device")
    field(SCAN, "I/O Intr")
    field(INP,  "@MTCACrate get_val cu $(UNIT) FAN6")
    field(PREC, "0")

    info(archive,"monitor:5.0")
}

# Calculate fan speed averages
record(calcout, "$(P)$(S)FanFrontAvg-Calc") {
		field(DESC, "Front fan average calculation")
		field(INPA, "$(P)$(S)Fan1-Mon CPP")
		field(INPB, "$(P)$(S)Fan2-Mon CPP")
		field(INPC, "$(P)$(S)Fan3-Mon CPP")
		field(CALC, "(A+B+C)/3")
		field(OOPT, "On Change")
		field(DOPT, "Use CALC")
		field(OUT,  "$(P)$(S)FanFrontAvg-Mon PP")
		field(PINI, "YES")
}

record(ai, "$(P)$(S)FanFrontAvg-Mon") {
		field(DESC, "Front fan average")
		field(EGU,  "RPM")
		field(LOLO, "500")
		field(LOW,  "1000")
		field(HIGH, "3500")
		field(HIHI, "4000")
		field(LLSV, "MAJOR")
		field(LSV,  "MINOR")
		field(HSV,  "MINOR")
		field(HHSV, "MAJOR")
}

record(calcout, "$(P)$(S)FanRearAvg-Calc") {
		field(DESC, "Rear fan average calculation")
		field(INPA, "$(P)$(S)Fan4 CPP")
		field(INPB, "$(P)$(S)Fan5 CPP")
		field(INPC, "$(P)$(S)Fan6 CPP")
		field(CALC, "(A+B+C)/3")
		field(OOPT, "On Change")
		field(DOPT, "Use CALC")
		field(OUT,  "$(P)$(S)FanRearAvg-Mon PP")
		field(PINI, "YES")
}

record(ai, "$(P)$(S)FanRearAvg-Mon") {
		field(DESC, "Rear fan average")
		field(EGU,  "RPM")
		field(LOLO, "500")
		field(LOW,  "1000")
		field(HIGH, "3500")
		field(HIHI, "4000")
		field(LLSV, "MAJOR")
		field(LSV,  "MINOR")
		field(HSV,  "MINOR")
		field(HHSV, "MAJOR")
}

# Calculate overall average from front and rear average.
# No need to PINI this record as it will be triggered by the
# other two records on initialization.
record(calcout, "$(P)$(S)FanAvg-Calc") {
		field(DESC, "All fan average calculation")
		field(INPA, "$(P)$(S)FanFrontAvg-Mon CPP")
		field(INPB, "$(P)$(S)FanRearAvg-Mon CPP")
		field(CALC, "(A+B)/2")
		field(OOPT, "On Change")
		field(DOPT, "Use CALC")
		field(OUT,  "$(P)$(S)FanAvg-Mon PP")
		field(PINI, "NO")
}

record(ai, "$(P)$(S)FanAvg-Mon") {
		field(DESC, "All fan average")
		field(EGU,  "RPM")
		field(LOLO, "500")
		field(LOW,  "1000")
		field(HIGH, "3500")
		field(HIHI, "4000")
		field(LLSV, "MAJOR")
		field(LSV,  "MINOR")
		field(HSV,  "MINOR")
		field(HHSV, "MAJOR")
}

record(stringin, "$(P)$(S)Name-Cte") {
    field(DESC, "Card name")
    field(DTYP, "Python Device")
    field(SCAN, "I/O Intr")
    field(INP,  "@MTCACrate get_name cu $(UNIT)")
}

record(ai, "$(P)$(S)Slot-Cte") {
    field(DESC, "Slot number")
    field(DTYP, "Python Device")
    field(SCAN, "I/O Intr")
    field(INP,  "@MTCACrate get_slot cu $(UNIT)")
    field(PREC, "0")
    field(EGU,  "None")
}

#record(bi, "$(P)$(S)HotSwap-Sts") {
    #field(DESC, "Hot swap status")
    #field(DTYP, "Python Device")
    #field(SCAN, "I/O Intr")
    #field(INP,  "@MTCACrate get_val cu $(UNIT) HOT_SWAP")
    #field(ZNAM, "Fault")
    #field(ZSV,  "MAJOR")
    #field(ONAM, "OK")
    #field(OSV,  "NO_ALARM")
#}

record(mbbi, "$(P)$(S)SlotAlarm-Sts") {
    field(DESC, "Slot alarm status")
    field(DTYP, "Python Device")
    field(SCAN, "I/O Intr")
    field(INP,  "@MTCACrate get_status cu $(UNIT)")
    field(ZRVL, "0")
    field(ZRST, "UNSET")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "NO_ALARM")
    field(ONSV, "NO_ALARM")
    field(TWVL, "2")
    field(TWST, "NON_CRITICAL")
    field(TWSV, "MINOR")
    field(THVL, "3")
    field(THST, "CRITICAL")
    field(THSV, "MAJOR")
    field(FRVL, "4")
    field(FRST, "NON_RECOVERABLE")
    field(FRSV, "MAJOR")

    info(archive,"monitor:5.0")
}

record(bi, "$(P)$(S)Comm-Sts") {
	field(DESC, "$(S) communications status")
	field(DTYP, "Python Device")
	field(SCAN, "I/O Intr")
	field(INP,  "@MTCACrate get_comms_sts cu $(UNIT)")
	field(ZNAM, "Error")
	field(ZSV,  "MAJOR")
	field(ONAM, "OK")
	field(OSV,  "NO_ALARM")

    info(archive,"monitor:5.0")
}
